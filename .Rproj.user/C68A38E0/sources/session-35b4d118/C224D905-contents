# test shrinkage on a preexisting database
#### library ####
library(tidyverse)
library(tidybayes)
library(brms)
library(mlbench)
library(ggridges)

#### Load data ####
data(PimaIndiansDiabetes, package = "mlbench")
df_diab <- PimaIndiansDiabetes %>% 
  as_tibble() %>% 
  mutate(diabetes = ifelse(diabetes == "pos", 1, 0))
rm(PimaIndiansDiabetes)

#### Process data ####
# probably want to scale the dataset so we aren't using wildly different scales 
df_diab %>% 
  gather(1:(ncol(.)-1), 
         key = "param", 
         value = "value") %>% 
  ggplot(aes(value, fill = diabetes)) + 
  geom_histogram(position = "dodge", 
                 colour = "transparent", 
                 aes(y = ..density..)) + 
  facet_wrap(~param, 
             scales = "free")

# can see there are probably some errors in the records... 
# a fair few 0 values where there presumably shouldn't be any?
df_diab_clean <- df_diab %>% 
  mutate(across(c(glucose, pressure, triceps, insulin, mass), ~ ifelse(.x == 0, NA_real_, .x))) %>% 
  drop_na() 

df_diab_clean %>% 
  gather(1:(ncol(.)-1), 
         key = "param", 
         value = "value") %>% 
  ggplot(aes(value, fill = as.factor(diabetes))) + 
  geom_histogram(position = "dodge", 
                 colour = "transparent", 
                 aes(y = ..density..)) + 
  facet_wrap(~param, 
             scales = "free")

# Looks a lot better than it did
# I'm going to naively scale the values to be between 0 and 1... 
# then subtract .5 to effectively median centre the values... 
# the problem we have then is that there's no way to tie the values together cleanly 
# but that's fine... 
df_diab_clean_scaled <- df_diab_clean %>% 
  mutate(across(c(age, glucose, insulin, mass, pressure, triceps), ~ scale(.x, center = T)[,1]))

# look at a plot 
df_diab_clean_scaled %>% 
  gather(1:(ncol(.)-1), 
         key = "param", 
         value = "value") %>% 
  ggplot(aes(value, fill = as.factor(diabetes))) + 
  geom_histogram(position = "dodge", 
                 colour = "transparent", 
                 aes(y = ..density..)) + 
  facet_wrap(~param, 
             scales = "free")

#### Some other plot ideas #### 
# Make a function to show the rolling average... 
# effectively... this will show where the trend could lie? 
showTrend <- function(thisData, windowSize = 4) {
  thisData %>% 
    gather(1:(ncol(.) - 1), 
           key = "param", 
           value = "value") %>% 
    group_by(param) %>% 
    arrange(value) %>% 
    mutate(roll = zoo::rollmean(diabetes, windowSize, na.pad = T)) %>% 
    ggplot(aes(value, roll)) +
    geom_point(alpha = .5) +
    # geom_path() + 
    facet_wrap(~param, 
               scales = "free_x") + 
    geom_smooth(method = "glm", 
                method.args = list(family = "binomial"))
}

# shows something... but it's not perfect by any stretch 
# Looks ok though 
showTrend(df_diab, 50)
showTrend(df_diab_clean, 50)



#### fit models ####
# I can have a look at what happens when you don't scale the variables as well... 
# I've tested it and the interaction model fits the data worse than the one with no interactions
m_noScale_main <- brm(diabetes ~ ., 
                      data = df_diab_clean, 
                      family = "bernoulli", 
                      chains = 1)

m_Scale_main <- brm(diabetes ~ ., 
                    data = df_diab_clean_scaled, 
                    family = "bernoulli", 
                    chains = 1)

m_noScale_main_horse <- brm(diabetes ~ ., 
                          data = df_diab_clean, 
                          family = "bernoulli", 
                          prior = prior(horseshoe(), class = "b"),
                          control = list(adapt_delta = .95),
                          chains = 1)

m_scale_main_horse <- brm(diabetes ~ ., 
                          data = df_diab_clean_scaled, 
                          family = "bernoulli", 
                          prior = prior(horseshoe(), class = "b"),
                          control = list(adapt_delta = .95),
                          chains = 1)

m_noScale_main_noClean <- brm(diabetes ~ ., 
                              data = df_diab, 
                              family = "bernoulli", 
                              chains = 1)


m_noScale_main_noClean_horse <- brm(diabetes ~ ., 
                                    data = df_diab, 
                                    family = "bernoulli",  
                                    prior = prior(horseshoe(), class = "b"),
                                    control = list(adapt_delta = .95),
                                    chains = 1)

# function to show the coefficients 
showCoefs <- function(thisModel, thisFill = "#a128fe", thisAlpha = .3){
  as.matrix(thisModel) %>% 
    as_tibble() %>% 
    select(starts_with("b_")) %>% 
    rowid_to_column() %>% 
    gather(2:ncol(.), 
           key = "param", 
           value = "coef") %>%
    ggplot(aes(coef, param)) + 
    geom_vline(xintercept = 0) + 
    stat_pointinterval(point_interval = "mean_hdci", 
                       colour = thisFill) +
    geom_density_ridges(fill = thisFill, 
                        alpha = thisAlpha, 
                        colour = "transparent") + 
    ggtitle(deparse(substitute(thisModel)))
}

library(patchwork)
showCoefs(m_Scale_main) +
  showCoefs(m_noScale_main) +
  showCoefs(m_scale_main_horse) +
  showCoefs(m_noScale_main_horse) + 
  showCoefs(m_noScale_main_noClean) +
  showCoefs(m_noScale_main_noClean_horse) + 
  plot_layout(nrow = 3)


