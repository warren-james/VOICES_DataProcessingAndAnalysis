library(brms)
library(tidyverse)
library(tidybayes)
library(ggridges)

set.seed(0918764532)

a <- 3
b1 <- .05
b2 <- -.8
b3 <- 1.1

sigma <- 1.5
noise <- .3

N <- 500

df_model <- tibble(subj = 1:N,
                   x1 = runif(N) > .5,#rnorm(N, sd = 3), 
                   x2 = runif(N) > .5) %>% 
    mutate(thisA  = rnorm(nrow(.), a, noise), 
           thisB1 = rnorm(nrow(.), b1, noise), 
           thisB2 = rnorm(nrow(.), b2, noise), 
           thisB3 = rnorm(nrow(.), b3, noise), 
           mu = thisA + thisB1 * x1 + thisB2 * x2 + thisB3 * (x1 * x2))
df_model$obs <- rnorm(N, df_model$mu, sigma) + rnorm(N, sd = noise)

df_model %>% 
  ggplot(aes(x1, obs, colour = x2)) + 
  geom_point() + 
  geom_smooth(method = "lm")

makeModel <- function(thisData, thisPrior = NULL, interaction = "^2"){
  if(is.null(thisPrior)){
    thisPrior <- "student_t(3, 0, 1)"
  }
  thisForm <- as.formula(paste0("obs ~ (x1 + x2)", interaction))
  PriorTable <- get_prior(thisForm, 
                          data = thisData, 
                          family = "normal") %>% 
    as_tibble()
  # return(PriorTable)
  
  # i <- 1
  
  for(i in 1:nrow(PriorTable)){
    thisCoef <- PriorTable$coef[i]
    thisClass <- PriorTable$class[i]
    if(grepl("x2", thisCoef)){
      priortoAdd <- thisPrior
    } else if(grepl("b", PriorTable$class[i])) {
      priortoAdd <- "student_t(3, 0, 1)"
    } else {
      priortoAdd <- PriorTable$prior[i]
    }
    if(i == 1){
      thisPriorList <- c(prior_string(priortoAdd, class = thisClass, coef = thisCoef))
    } else {
      thisPriorList <- c(thisPriorList, prior_string(priortoAdd, class = thisClass, coef = thisCoef))
    }
  }
  print(thisPriorList)
  # return(thisPriorList)
  model <- brm(thisForm, 
               data = thisData, 
               family = gaussian(), 
               prior = thisPriorList,
               # prior = prior_string(thisPrior, class = "b"),
               iter = 2000, 
               chains = 1)
  return(model)
}

m_test_function <- makeModel(df_model, "normal(0, 1)")


# # This is a way to use the horseshoe prior on a subset of variables
# Makes sense I think... will be a pain to code a function to handle this... 
# but I think it's still something I can deal with... 

prior_summary(m_test_function)


showPost <- function(model, thisColour = "#a12387"){
  post <- as.matrix(model) %>% 
    as_tibble() %>% 
    select(-c(lprior, lp__)) %>% 
    rowid_to_column(var = "iter") %>% 
    gather(2:ncol(.), 
           key = "param", 
           value = "coef") %>% 
    filter(grepl("b_", param),
           !grepl("sd", param), 
           !grepl("hs", param)) 
  
  postSumm <- post %>%
    group_by(param) %>% 
    mean_hdci(coef) %>% 
    mutate(across(c(coef, .lower, .upper), ~ round(.x, 2)), 
           label = paste0(coef, " [", .lower, " | ", .upper, "]"))
  
  post %>% 
    ggplot(aes(coef, param)) + 
    geom_density_ridges(fill = thisColour, 
                        alpha = .3, 
                        colour = "transparent") + 
    geom_text(data = postSumm, 
              aes(label = label), 
              colour = thisColour)
}

m_test <- brm(bf(obs ~ a + b, nl = T) +
                lf(a ~ x2 + x1:x2, center = TRUE) +
                lf(b ~ 0 + x1, cmc = FALSE), 
              data = df_model, 
              prior = c(prior_string("normal(0, 3)", nlpar = "a")),
              chains = 1)

showPost(m_test)
showPost(m_test_function)
plot(conditional_effects(m_test), points = T)



