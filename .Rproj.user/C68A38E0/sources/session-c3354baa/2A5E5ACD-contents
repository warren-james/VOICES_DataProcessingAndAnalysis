# test two different ways of showing model results 
# start with a simple normal distribution to keep things easy 
library(tidyverse)
library(tidybayes)
library(brms)


N <- 40
n_groups <- 5

group_mu <- c(3, 1, 2, 1, -1)
group_sigma <- .5

df_model <- tibble(group = rep(letters[1:n_groups], N), 
                   obs = rnorm(N * n_groups, group_mu, group_sigma))

df_model %>% 
  ggplot(aes(obs, group)) + 
  ggridges::geom_density_ridges(stat = "binline")

m <- brm(obs ~ group, 
         data = df_model, 
         chains = 1)

# using rnorm to generate observations 
# Problem with this version is that the values will not map onto the true values 
# unless you add the intercept term to them. The demo has 0 for the intercept term, 
# so it works nicely, but we need to do that manually unless our intercept does happen to be 0 
df_pred_spreadDraws <- m %>% 
  spread_draws(b_Intercept, b_groupb, b_groupc, b_groupd, b_groupe, sigma) %>% 
  gather(b_Intercept:b_groupe, 
         key = "param", 
         value = "mu") %>% 
  mutate(param = str_replace(param, "Intercept", "groupa"), 
         param = str_remove(param, "b_group"), 
         prediction = rnorm(n(), mu, sigma), 
         predType = "spreadDraws")


df_pred_mine <- m %>% 
  as.matrix() %>% 
  as_tibble() %>% 
  select(-c(lprior, lp__)) %>% 
  mutate(across(2:5, ~ .x + b_Intercept)) %>%
  gather(1:ncol(.), 
         key = "param", 
         value = "coef") %>%
  mutate(param = str_replace(param, "Intercept", "groupa"), 
         param = str_remove(param, "b_group")) %>% 
  group_by(param) %>%
  mean_hdci() %>% 
  select(param, coef) %>% 
  spread(param, coef) %>% 
  gather(1:5, 
         key = "param", 
         value = "mu") %>% 
  mutate(q.5 = qnorm(.5, mu, sigma), 
         q.025 = qnorm(.025, mu, sigma), 
         q.975 = qnorm(.975, mu, sigma))

df_model %>% 
  ggplot(aes(obs, group)) + 
  geom_density_ridges(colour = "transparent", 
                      alpha = .5) + 
  stat_interval(data = df_pred_spreadDraws, 
                aes(prediction, param)) + 
  geom_point(data = df_pred_mine, 
             aes(mu, param)) + 
  geom_segment(data = df_pred_mine, 
               aes(x = q.025, y = param, 
                   yend = param, 
                   xend = q.975)) +
  scale_colour_brewer()






